 
// const express = require('express');
// const bodyParser = require('body-parser');
// const cors = require('cors');
// const mongoose = require('mongoose');
// const multer = require('multer');
// const path = require('path');
// const fs = require('fs');
// const bcrypt = require('bcrypt');
// const jwt = require('jsonwebtoken');
// const dotenv = require('dotenv');
// const PDFDocument = require('pdfkit');

// dotenv.config();

// const getSubjects = require('./subjects');
// const HOD = require('./models/HOD');

// const app = express();
// const port = process.env.PORT || 3001;
// const SECRET_KEY = process.env.SECRET_KEY || 'my_super_secret_key_12345';

// const authenticateToken = (req, res, next) => {
//   const authHeader = req.headers['authorization'];
//   const token = authHeader && authHeader.split(' ')[1];

//   if (!token) {
//     return res.sendStatus(401); // Unauthorized
//   }

//   jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
//     if (err) {
//       console.error('JWT Error:', err);
//       return res.sendStatus(403); // Forbidden
//     }

//     req.user = user;
//     next();
//   });
// };

// // Use the authenticateToken middleware for routes that require authentication
// app.use('/students', authenticateToken);
// app.use('/approve', authenticateToken);

// app.use(cors());
// app.use(bodyParser.json());
// app.use('/uploads', express.static('uploads'));

// // Ensure the uploads directory exists
// const uploadsDir = path.join(__dirname, 'uploads');
// if (!fs.existsSync(uploadsDir)) {
//   fs.mkdirSync(uploadsDir);
// }

// // Multer setup for file uploads
// const storage = multer.diskStorage({
//   destination: (req, file, cb) => {
//     cb(null, 'uploads/');
//   },
//   filename: (req, file, cb) => {
//     cb(null, Date.now() + path.extname(file.originalname));
//   }
// });
// const upload = multer({ storage });

// // Connect to MongoDB
// mongoose.connect('mongodb://127.0.0.1:27017/examreg')
//   .then(() => console.log('MongoDB connected'))
//   .catch(err => console.error('MongoDB connection error:', err));

// // Define Student Schema
// const studentSchema = new mongoose.Schema({
//   rollNumber: String,
//   name: String,
//   gender: String,
//   email: String,
//   branch: String,
//   year: String,
//   eligible: Boolean,
//   approved: Boolean,
// });

// const Student = mongoose.model('Student', studentSchema);

 

// // Define your Registration schema and model
// const registrationSchema = new mongoose.Schema({
//   rollNumber: String,
//   name: String,
//   gender: String,
//   email: String,
//   branch: String,
//   year: String,
//   section: String,
//   image: String,
//   subjects: [String],
// });

// const Registration = mongoose.model('Registration', registrationSchema);

// // Check registration endpoint
// app.get('/check_registration', async (req, res) => {
//   try {
//     const { rollNumber } = req.query;
//     const existingStudent = await Registration.findOne({ rollNumber });
    
//     if (existingStudent) {
//       return res.json({ registered: true });
//     } else {
//       return res.json({ registered: false });
//     }
//   } catch (error) {
//     console.error('Check registration error:', error);
//     res.status(500).json({ success: false, message: 'Error checking registration' });
//   }
// });

// // Register endpoint
// app.post('/register', upload.single('image'), async (req, res) => {
//   try {
//     const { rollNumber, name, gender, email, branch, year, section, subjects } = req.body;

//     const existingStudent = await Registration.findOne({ rollNumber });
//     if (existingStudent) {
//       return res.status(400).json({ success: false, message: 'Roll number already registered' });
//     }

//     // Deduplicate subjects
//     const uniqueSubjects = [...new Set(subjects.split(','))];

//     const newRegistration = new Registration({
//       rollNumber,
//       name,
//       gender,
//       email,
//       branch,
//       year,
//       section,
//       image: req.file ? req.file.filename : null,
//       subjects: uniqueSubjects,
//     });

//     await newRegistration.save();
//     res.json({ success: true, message: 'Registration successful' });
//   } catch (error) {
//     console.error('Registration error:', error);
//     res.status(500).json({ success: false, message: 'Registration failed' });
//   }
// });



// // Define the route to fetch subjects based on branch and year
// app.get('/subjects', (req, res) => {
//   const { branch, year } = req.query;
//   const subjects = getSubjects(branch, year);
//   res.json(subjects);
// });

// // Endpoint to check eligibility
// app.get('/check-eligibility/:rollNumber', async (req, res) => {
//   const rollNumber = req.params.rollNumber;
//   console.log(`Checking eligibility for roll number: ${rollNumber}`);

//   try {
//     const student = await Student.findOne({ rollNumber: rollNumber });
//     if (student) {
//       console.log(`Student found: ${JSON.stringify(student)}`);
//       res.json({ eligible: student.eligible });
//     } else {
//       console.log(`Student with roll number ${rollNumber} not found.`);
//       res.status(404).json({ message: 'Student not found' });
//     }
//   } catch (error) {
//     console.error('Error retrieving student:', error);
//     res.status(500).json({ message: 'Internal server error' });
//   }
// });

// // Endpoint to fetch all student registrations for HOD
 
// app.get('/students', async (req, res) => {
//   const { section, year } = req.query;
//   const token = req.headers.authorization.split(' ')[1];

//   try {
//     const decoded = jwt.verify(token, SECRET_KEY);
//     const hodBranch = decoded.branch;

//     const query = { branch: hodBranch };

//     if (section) {
//       query.section = section;
//     }
//     if (year) {
//       query.year = year;
//     }

//     const students = await Registration.find(query);
//     res.json(students);
//   } catch (error) {
//     console.error('Error fetching students:', error);
//     res.status(500).json({ message: 'Error fetching students' });
//   }
// });



// //Endpoint to approve a student
// // app.post('/approve', async (req, res) => {
// //   const { rollNumber } = req.body;
// //   try {
// //     const student = await Registration.findOneAndUpdate(
// //       { rollNumber },
// //       { approved: true },
// //       { new: true }
// //     );
// //     if (student) {
// //       res.json({ success: true, message: 'Student approved' });
// //     } else {
// //       res.status(404).json({ success: false, message: 'Student not found' });
// //     }
// //   } catch (error) {
// //     console.error('Error approving student:', error);
// //     res.status(500).json({ message: 'Error approving student' });
// //   }
// // });
 
// app.post('/approve', async (req, res) => {
//   const { rollNumber } = req.body;
//   try {
//     const student = await Registration.findOneAndUpdate(
//       { rollNumber },
//       { approved: true },
//       { new: true }
//     );
//     if (student) {
//       console.log('Student approved:', student); // Log the updated student
//       res.json({ success: true, message: 'Student approved', student });
//     } else {
//       res.status(404).json({ success: false, message: 'Student not found' });
//     }
//   } catch (error) {
//     console.error('Error approving student:', error);
//     res.status(500).json({ message: 'Error approving student' });
//   }
// });

// // Assuming you have an express app
// app.delete('/reject', async (req, res) => {
//   const { rollNumber } = req.body;
//   try {
//     const student = await Registration.findOneAndDelete({ rollNumber });
//     if (student) {
//       res.json({ success: true, message: 'Student rejected' });
//     } else {
//       res.status(404).json({ success: false, message: 'Student not found' });
//     }
//   } catch (error) {
//     console.error('Error rejecting student:', error);
//     res.status(500).json({ message: 'Error rejecting student' });
//   }
// });



// // Endpoint to generate hall ticket
// app.get('/generate-hall-ticket/:rollNumber', async (req, res) => {
//   const { rollNumber } = req.params;

//   try {
//     const student = await Registration.findOne({ rollNumber });
//     if (!student || !student.approved) {
//       return res.status(404).send('Student not found or not approved.');
//     }

//     const doc = new PDFDocument();
//     const filePath = path.join(__dirname, 'halltickets', `${rollNumber}.pdf`);

//     doc.pipe(fs.createWriteStream(filePath));

//     // Add header image
//     // doc.image('D:\\mycode\\EXAMREG_TEST\\backend\\assets\\Designer (2).jpeg', { width: 150, height: 150 });
//     doc.moveDown();

//     // Title
//     doc.fontSize(24).fillColor('#333').text('Hall Ticket', { align: 'center' });
//     doc.moveDown();

//     // Student Information
//     doc.fontSize(14).fillColor('#555');
//     doc.text(`Roll Number: ${student.rollNumber}`);
//     doc.text(`Name: ${student.name}`);
//     doc.text(`Gender: ${student.gender}`);
//     doc.text(`Branch: ${student.branch}`);
//     doc.text(`Year: ${student.year}`);
//     doc.text(`Section: ${student.section}`);
//     doc.moveDown();

//     // Calculate the position for the image to be right-aligned
//     const imagePath = path.join(__dirname, 'uploads', student.image);
//     const imageWidth = 100;
//     const imageHeight = 100;
//     const pageWidth = doc.page.width;
//     const marginRight = 50;  // Adjust as needed
//     const xPos = pageWidth - imageWidth - marginRight;
//     const yPos = doc.y;

//     doc.image(imagePath, xPos, yPos, { width: imageWidth, height: imageHeight });
//     doc.moveDown();

//     // Subjects
//     doc.fontSize(12).fillColor('#333').text('Subjects:', { continued: true });
//     student.subjects.forEach((subject, index) => {
//       doc.text(`${index + 1}. ${subject}`);
//     });

//     doc.end();

//     res.download(filePath, `Hall_Ticket_${rollNumber}.pdf`, (err) => {
//       if (err) {
//         console.error('Error sending the file:', err);
//         res.status(500).send('Error downloading the PDF');
//       } else {
//         console.log(`Hall ticket generated for ${rollNumber}`);
//       }
//     });
//   } catch (error) {
//     console.error('Error generating hall ticket:', error);
//     res.status(500).send('Internal Server Error');
//   }
// });

// // Endpoint to fetch a specific student's details

// app.get('/students/:rollNumber', async (req, res) => {
//   try {
//     const student = await Registration.findOne({ rollNumber: req.params.rollNumber });
//     if (!student) {
//       return res.status(404).json({ message: 'Student not found' });
//     }
//     res.json(student);
//   } catch (error) {
//     console.error('Error fetching student details:', error);
//     res.status(500).json({ message: 'Internal server error' });
//   }
// });

// // Endpoint to add students to the database of eligible students
// app.post('/add-student', async (req, res) => {
//   const { rollNumber, name } = req.body;
//   try {
//     const newStudent = new Student({
//       rollNumber,
//       name,
//       eligible: true,
//       approved: false,
//     });
//     await newStudent.save();
//     res.json({ success: true, message: 'Student added successfully' });
//   } catch (error) {
//     console.error('Error adding student:', error);
//     res.status(500).json({ success: false, message: 'Error adding student' });
//   }
// });

// // Login endpoint for HODs
// app.post('/hod-login', async (req, res) => {
//   const { username, password } = req.body;

//   try {
//     const hod = await HOD.findOne({ username });
//     if (!hod) {
//       return res.status(401).json({ success: false, message: 'Invalid credentials' });
//     }

//     const isMatch = await bcrypt.compare(password, hod.password);
//     if (!isMatch) {
//       return res.status(401).json({ success: false, message: 'Invalid credentials' });
//     }

//     const token = jwt.sign({ id: hod._id, branch: hod.branch }, SECRET_KEY, { expiresIn: '1h' });
//     res.json({ success: true, token, branch: hod.branch });
//   } catch (error) {
//     console.error('Error during HOD login:', error);
//     res.status(500).json({ success: false, message: 'Internal server error' });
//   }
// });

// app.listen(port, () => {
//   console.log(`Server running on port ${port}`);
// });